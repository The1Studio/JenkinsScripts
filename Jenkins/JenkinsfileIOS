@Library('jenkins-helper') _

def jenkinsBuilder

pipeline {
    agent { label "macos" }

    stages {
        stage('Create Builder') {
            steps {
                script {
                    jenkinsBuilder = JenkinsUtils.InstantiateJenkinsBuilder('ios')

                    jenkinsBuilder.importBuildSettings([jobName                    : env.JOB_NAME,
                                                        buildName                  : env.PARAM_BUILD_FILE_NAME ?: 'TheOneStudio',
                                                        buildNumber                : env.BUILD_NUMBER,
                                                        platform                   : 'ios',
                                                        scriptingBackend           : 'il2cpp',
                                                        unityScriptingDefineSymbols: env.PARAM_UNITY_SCRIPTING_DEFINE_SYMBOLS ?: '',
                                                        unityIdEmail               : credentials('jenkins-id-for-unity-email'),
                                                        unityIdPassword            : credentials('jenkins-id-for-unity-password'),
                                                        unityIdLicense             : credentials('jenkins-id-for-unity-license'),
                                                        uploadUrl                  : env.PARAM_BUILD_DOWNLOAD_URL ?: 'https://the1studio-builds.s3.ap-southeast-1.amazonaws.com',
                                                        discordWebhookUrl          : env.PARAM_DISCORD_WEBHOOK_URL ?: 'https://discord.com/api/webhooks/1048201767629897829/cA68S40j0uso30EP1hDUuP9t2o4NgY8CwxbAK4WVg4iB1P6oUmpkCciqqYDGju0pSvJY',
                                                        rootPathAbsolute           : pwd(),
                                                        unityProjectPathAbsolute   : "${pwd()}/Unity${env.PARAM_BUILD_FILE_NAME ?: 'TheOneStudio'}",
                                                        unityBinaryPathAbsolute    : tool(name: env.PARAM_UNITY_TOOL_NAME ?: 'Unity3D 2021.3.23f1'),
                                                        isBuildDevelopment         : env.PARAM_SHOULD_BUILD_DEVELOPMENT ? true : false,
                                                        isOptimizeBuildSize        : env.PARAM_SHOULD_OPTIMIZE_BUILD_SIZE ? true : false,
                                                        isUploadBuild              : true,
                                                        isNotifyToChatChannel      : true,
                                                        signingTeamId              : env.PARAM_SIGNING_TEAM,])
                }
            }
        }

        stage("Clean and sync") {
            options { timeout(time: 1, unit: 'HOURS') }

            steps {
                script {
                    echo "---- Start cleaning ----"
                    sh "git clean -fd"
                    sh "git reset --hard"
                    sh "git submodule foreach --recursive git clean -fd"
                    sh "git submodule foreach --recursive git reset --hard"
                    sh "rm -rf .\\Build\\"
                    echo "---- End cleaning   ----"

                    echo "---- Update submodule ----"
                    sh "git submodule update --init"
                    sh "git submodule update"
                    echo "---- End Update submodule   ----"

                    // set build version and other info
                    sh "JenkinsScripts/BashScripts/set-game-version.sh \"${env.BUILD_VERSION}\" \"${env.BUILD_NUMBER}\" \"${env.GIT_COMMIT}\" \"${env.BUILD_FILE_NAME}\""
                    // Build message is failed by default, then we will change it to success if build success
                    sh "echo \"__version: ${env.BUILD_VERSION} - number: ${env.BUILD_NUMBER}__ was built failed!!!\" > ${CHAT_NOTIFY_DESCRIPTION_FILE}"
                }
            }
        }

        stage("Build Client (IOS)") {
            options { timeout(time: 2, unit: 'HOURS') }

            steps {
                script {
                    jenkinsBuilder.build()
                }
            }

            post {
                always {
                    script {
                        if (fileExists("Build/Logs/Build-Client.ios.log")) {
                            archiveArtifacts artifacts: "Build/Logs/Build-Client.ios.log", allowEmptyArchive: true
                        }

                        if (fileExists("Build/Logs/Build-Client-Report.ios.log")) {
                            archiveArtifacts artifacts: "Build/Logs/Build-Client-Report.ios.log", allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage("Upload Build") {
            options { timeout(time: 75, unit: 'MINUTES') }

            steps {
                script {
                    sh "echo \"__version: ${env.BUILD_VERSION} - number: ${env.BUILD_NUMBER}__ was built successfully !!!\" > ${CHAT_NOTIFY_DESCRIPTION_FILE}"

                    jenkinsBuilder.uploadBuild()

                    sh "echo \"__$platform (${output}) Build - $buildSizeIpa MB__: ${downloadURL}.ipa.zip\nXCArchive: ${downloadURL}.xcarchive.zip - $buildSizeArchive MB\" >> $CHAT_NOTIFY_DESCRIPTION_FILE"
                }
            }
        }
    }

    post {
        always {
            script {
                jenkinsBuilder.notifyToChatChannel()
//                if (env.NOTIFY_CHAT_CHANNEL) {
//                    if (env.DISCORD_WEBHOOK_URL) {
//                        discordSend description: readFile(env.CHAT_NOTIFY_DESCRIPTION_FILE), enableArtifactsList: true, footer: "------TheOneStudio-------", link: env.BUILD_URL, result: currentBuild.currentResult, showChangeset: true, thumbnail: 'https://user-images.githubusercontent.com/9598614/205434501-dc9d4c7a-caad-48de-8ec2-ca586f320f87.png', title: "$JOB_NAME - $BUILD_NUMBER", webhookURL: DISCORD_WEBHOOK_URL
//                    }
//
//                    if (env.SLACK_CHANNEL) {
//                        slackSend channel: env.SLACK_CHANNEL, teamDomain: env.SLACK_DOMAIN, color: 'good', message: readFile(env.CHAT_NOTIFY_DESCRIPTION_FILE), tokenCredentialId: 'chibi-clash-income-webhook'
//                    }
//                }
            }
        }
    }
}
